// Mocks generated by Mockito 5.2.0 from annotations
// in top_football_team/test/providers/top_premier_league_team_provider.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:top_football_team/models/match.dart' as _i7;
import 'package:top_football_team/models/season.dart' as _i3;
import 'package:top_football_team/models/team.dart' as _i4;
import 'package:top_football_team/repositories/premier_league_repository.dart'
    as _i5;
import 'package:top_football_team/services/premier_league_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePremierLeagueService_0 extends _i1.Fake
    implements _i2.PremierLeagueService {}

class _FakeSeason_1 extends _i1.Fake implements _i3.Season {}

class _FakeDateTime_2 extends _i1.Fake implements DateTime {}

class _FakeTeam_3 extends _i1.Fake implements _i4.Team {}

/// A class which mocks [PremierLeagueRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPremierLeagueRepository extends _i1.Mock
    implements _i5.PremierLeagueRepository {
  MockPremierLeagueRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PremierLeagueService get premierLeagueService => (super.noSuchMethod(
      Invocation.getter(#premierLeagueService),
      returnValue: _FakePremierLeagueService_0()) as _i2.PremierLeagueService);
  @override
  set premierLeagueService(_i2.PremierLeagueService? _premierLeagueService) =>
      super.noSuchMethod(
          Invocation.setter(#premierLeagueService, _premierLeagueService),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i3.Season> getRecentSeason() =>
      (super.noSuchMethod(Invocation.method(#getRecentSeason, []),
              returnValue: Future<_i3.Season>.value(_FakeSeason_1()))
          as _i6.Future<_i3.Season>);
  @override
  DateTime getDateTo(DateTime? seasonEndDate) =>
      (super.noSuchMethod(Invocation.method(#getDateTo, [seasonEndDate]),
          returnValue: _FakeDateTime_2()) as DateTime);
  @override
  DateTime getDateFrom(DateTime? dateTo) =>
      (super.noSuchMethod(Invocation.method(#getDateFrom, [dateTo]),
          returnValue: _FakeDateTime_2()) as DateTime);
  @override
  _i6.Future<List<_i7.Match>> getRecentMatches(_i3.Season? season) =>
      (super.noSuchMethod(Invocation.method(#getRecentMatches, [season]),
              returnValue: Future<List<_i7.Match>>.value(<_i7.Match>[]))
          as _i6.Future<List<_i7.Match>>);
  @override
  dynamic incrementTeamTally({int? winnersId, Map<int, int>? tally}) =>
      super.noSuchMethod(Invocation.method(
          #incrementTeamTally, [], {#winnersId: winnersId, #tally: tally}));
  @override
  int setTopTeamId({int? winnersId, int? topTeamsId, Map<int, int>? tally}) =>
      (super.noSuchMethod(
          Invocation.method(#setTopTeamId, [],
              {#winnersId: winnersId, #topTeamsId: topTeamsId, #tally: tally}),
          returnValue: 0) as int);
  @override
  int getTopTeamsId(List<_i7.Match>? recentMatches) =>
      (super.noSuchMethod(Invocation.method(#getTopTeamsId, [recentMatches]),
          returnValue: 0) as int);
  @override
  _i6.Future<_i4.Team> getTopTeam(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTopTeam, [id]),
              returnValue: Future<_i4.Team>.value(_FakeTeam_3()))
          as _i6.Future<_i4.Team>);
  @override
  _i6.Future<_i4.Team?> getTopPremierLeagueTeam() =>
      (super.noSuchMethod(Invocation.method(#getTopPremierLeagueTeam, []),
          returnValue: Future<_i4.Team?>.value()) as _i6.Future<_i4.Team?>);
}
